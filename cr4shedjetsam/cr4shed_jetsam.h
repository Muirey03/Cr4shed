/*
Properties:
version (Tq,R,V_version)
task (TI,R,V_task)
suspensionToken (TI,R,V_suspensionToken)
footprintOutput (T@"NSDictionary",R,V_footprintOutput)
pid (Ti,R,V_pid)
ppid (Ti,R,V_ppid)
cid (TQ,R,V_cid)
startTime (T@"NSDate",R,V_startTime)
currentTime (T@"NSDate",R,V_currentTime)
dirtyFlags (TI,R,V_dirtyFlags)
procFlags (TI,R,V_procFlags)
exceptionCode0 (Tq,R,V_exceptionCode0)
crashedThreadId (TQ,R,V_crashedThreadId)
ledgerPhysFootprint (TQ,R,V_ledgerPhysFootprint)
ledgerPhysFootprintPeak (TQ,R,V_ledgerPhysFootprintPeak)
ledgerInternal (TQ,R,V_ledgerInternal)
ledgerInternalCompressed (TQ,R,V_ledgerInternalCompressed)
ledgerAlternateAccounting (TQ,R,V_ledgerAlternateAccounting)
ledgerAlternateAccountingCompressed (TQ,R,V_ledgerAlternateAccountingCompressed)
ledgerPurgeableNonvolatile (TQ,R,V_ledgerPurgeableNonvolatile)
ledgerPurgeableNonvolatileCompressed (TQ,R,V_ledgerPurgeableNonvolatileCompressed)
ledgerPageTable (TQ,R,V_ledgerPageTable)
ledgerIOKitMapped (TQ,R,V_ledgerIOKitMapped)
ledgerWiredMem (TQ,R,V_ledgerWiredMem)
ledgerNetworkNonvolatile (TQ,R,V_ledgerNetworkNonvolatile)
ledgerNetworkNonvolatileCompressed (TQ,R,V_ledgerNetworkNonvolatileCompressed)
osLogs (T@"NSArray",R,V_osLogs)
cachedMetaDataDict (T@"NSDictionary",R,V_cachedMetaDataDict)
memoryGraph (T@"VMUProcessObjectGraph",R,V_memoryGraph)
executionStack (T@"NSDictionary",R,V_executionStack)
execName (T@"NSString",R,V_execName)
execPath (T@"NSString",R,V_execPath)
bundleID (T@"NSString",R,V_bundleID)
coalitionBundleID (T@"NSString",R,V_coalitionBundleID)
exceptionType (Tq,R,V_exceptionType)
limitValue (TQ,R,V_limitValue)
upTime (Tq,R,V_upTime)
is64Bit (TB,R,V_is64Bit)
hwModel (T@"NSString",R,V_hwModel)
osVersion (T@"NSDictionary",R,V_osVersion)

Instance methods:
dealloc (v16@0:8)
copyWithZone: (@24@0:8^{_NSZone=}16)
.cxx_destruct (v16@0:8)
version (q16@0:8)
bundleID (@16@0:8)
execPath (@16@0:8)
pid (i16@0:8)
task (I16@0:8)
startTime (@16@0:8)
currentTime (@16@0:8)
osVersion (@16@0:8)
procFlags (I16@0:8)
limitValue (Q16@0:8)
ppid (i16@0:8)
exceptionType (q16@0:8)
isFirstParty (B16@0:8)
is64Bit (B16@0:8)
hwModel (@16@0:8)
extractCorpseInfoHandler: (v32@0:8{kcdata_iter=^{kcdata_item}^v}16)
_symbolOwners (@16@0:8)
createMetaDataDict (@16@0:8)
releaseAnalyzedTask (v16@0:8)
initUsingHostInfoWithTask:andSuspensionToken: (@24@0:8I16I20)
extractCorpseInfo (B16@0:8)
extractTaskInfo (B16@0:8)
generateFootprint (v16@0:8)
extractBacktraceInfo (v16@0:8)
generateMemoryGraph (v16@0:8)
initWithMetaDataDict:andMemoryGraph: (@32@0:8@16@24)
prettyPrintBacktrace (@16@0:8)
prettyPrintBinaryImages (@16@0:8)
saveLogFileWithHandle:error: (B32@0:8@16^@24)
extractSystemLogs:fromDate:toDate: (v40@0:8@16@24@32)
populateVerboseDiagnostics: (v20@0:8B16)
memoryGraph (@16@0:8)
executionStack (@16@0:8)
execName (@16@0:8)
coalitionBundleID (@16@0:8)
upTime (q16@0:8)
suspensionToken (I16@0:8)
footprintOutput (@16@0:8)
cid (Q16@0:8)
dirtyFlags (I16@0:8)
exceptionCode0 (q16@0:8)
crashedThreadId (Q16@0:8)
ledgerPhysFootprint (Q16@0:8)
ledgerPhysFootprintPeak (Q16@0:8)
ledgerInternal (Q16@0:8)
ledgerInternalCompressed (Q16@0:8)
ledgerAlternateAccounting (Q16@0:8)
ledgerAlternateAccountingCompressed (Q16@0:8)
ledgerPurgeableNonvolatile (Q16@0:8)
ledgerPurgeableNonvolatileCompressed (Q16@0:8)
ledgerPageTable (Q16@0:8)
ledgerIOKitMapped (Q16@0:8)
ledgerWiredMem (Q16@0:8)
ledgerNetworkNonvolatile (Q16@0:8)
ledgerNetworkNonvolatileCompressed (Q16@0:8)
osLogs (@16@0:8)
cachedMetaDataDict (@16@0:8)

Class methods:
alloc (@16@0:8)
resourceExceptionFromTask:error: (@28@0:8I16^@20)
resourceExceptionFromLogFileHandle:error: (@32@0:8@16^@24)
*/

#import <mach/mach.h>

@interface MemoryResourceException : NSObject
@property (nonatomic, readonly) int pid;
@property (nonatomic, readonly) mach_port_t task;
@property (nonatomic, readonly) NSString* execName;
@property (nonatomic, readonly) NSString* bundleID;
@property (nonatomic, readonly) NSDate* startTime;
@property (nonatomic, readonly) NSInteger upTime;
-(void)extractBacktraceInfo;
-(NSString*)prettyPrintBinaryImages;
//new
-(void)generateCr4shedReport;
-(NSString*)fetchMemoryInfo;
@end
